require_relative '../categories/best_moment'
require_relative '../categories/boolean_enum'
require_relative '../categories/carrier'
require_relative '../categories/gender'
require_relative '../categories/interest'
require_relative '../categories/language_level'
require_relative '../categories/marketing_channel'
require_relative '../categories/priority'
require_relative '../categories/semester'
require_relative '../categories/study_stage'

class Class

  # Acessor to generate Text Podio Fields Getter and Setter
  def text_attr_accessor(*args)
    args.each do |arg|

      #Here's the getter
      self.class_eval("
        # Getter for #{arg} - Generated with meta-programming
        # @param index [Integer] Index of the item you want to retrieve
        # @return [String] #{arg}
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          fields(index, i).to_s unless i.nil?
        end
      ")

      #Here's the setter
      self.class_eval("
        # Setter for #{arg} - Generated with meta-programming
        # @param val [String] The value you want to set
        # @return [String] #{arg}
        def #{arg}=(val)
          @#{arg} = val.to_s
        end
      ")
    end
  end

  # Acessor to generate Text Podio Fields Getter and Setter
  def number_attr_accessor(*args)
    args.each do |arg|

      #Here's the getter
      self.class_eval("
        # Getter for #{arg} - Generated with meta-programming
        # @param index [Integer] Index of the item you want to retrieve
        # @return [Integer] #{arg}
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          fields(index, i).to_i unless i.nil?
        end
      ")

      #Here's the setter
      self.class_eval("
        # Setter for #{arg} - Generated with meta-programming
        # @param val [Integer] The value you want to set
        # @return [Integer] #{arg}
        def #{arg}=(val)
          @#{arg} = val.to_i unless val.nil?
        end
      ")
    end
  end

  # Acessor to generate Date Podio Fields Getter and Setter
  def date_attr_accessor(*args)
    args.each do |arg|

      #Here's the getter
      self.class_eval("
        # Getter for #{arg} - Generated by meta-programming
        # @param index [Integer] Index of the item you want to retrieve
        # @return [DateTime] #{arg}
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          date = values(index, i)[0]['start'] unless i.nil?
          DateTime.strptime(date,'%Y-%m-%d %H:%M:%S') unless date.nil?
        end
      ")

      #Here's the setter
      self.class_eval("
        # Setter for #{arg} - Generated by meta-programming
        # @param val [DateTime] The value you want to set
        # @return [String] #{arg}
        def #{arg}=(val)
          @#{arg} = val.strftime('%Y-%m-%d %H:%M:%S') unless val.nil?
        end
      ")
    end
  end

  # Acessor to generate Doble Date Podio Fields Getter and Setter
  #TODO
  def dates_attr_accessor(*args)
    args.each do |arg|

      #Here's the getter
      self.class_eval("
        # Getter for #{arg} - Generated with meta-programming
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Array] Array of state and end date of #{arg} of the Global Talent
        def #{arg}(index)
          @#{arg}
        end
      ")

      #Here's the setter
      self.class_eval("
        # Setter for #{arg} - Generated with meta-programming
        # @param val [Array] The values you want to set
        # @return [Array] #{arg}
        def #{arg}=(val)
          @#{arg} = val
        end
      ")
    end
  end

  # Acessor to generate boolean category Podio Fields Getter and Setter
  def boolean_attr_accessor(*args)
    args.each do |arg|

      #Here's the getter for the boolean
      self.class_eval("
        # Getter for #{arg} - Generated with meta-programming
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Boolean] If the Global Talent is #{arg}
        def #{arg}?(index)
          #{arg}(index) == BooleanEnum.statuses[:yes]
        end
      ")

      #Here's the getter for the category value
      self.class_eval("
        # Getter for #{arg} - Generated with meta-programming
        # @param index [Integer] Index of the item you want to retrieve
        # @return [BooleanEnum] #{arg}
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          BooleanEnum.statuses[BooleanEnum.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
        end
      ")

      #Here's the setter
      self.class_eval("
        # Setter for #{arg} - Generated with meta-programming
        # @param val [Symbol] The value you want to set
        def #{arg}=(val)
          @#{arg} = val
        end
      ")
    end
  end

  # Acessor to generate category Podio Fields Getter and Setter
  def category_attr_accessor(*args)
    args.each do |arg|

      #Here's the getter
      self.class_eval("
        # Getter for #{arg} - Generated with meta-programming
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Symbol] #{arg} category index of the Global Talent
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          case '#{arg}'
            when 'interest'
              val = Interest.statuses[Interest.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'priority'
              val = Priority.statuses[Priority.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'sex'
              val = Gender.statuses[Gender.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'study_stage'
              val = StudyStage.statuses[StudyStage.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'semester'
              val = Semester.statuses[Semester.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'english_level'
              val = LanguageLevel.statuses[LanguageLevel.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'spanish_level'
              val = LanguageLevel.statuses[LanguageLevel.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'best_moment'
              val = BestMoment.statuses[BestMoment.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'marketing_channel'
              val = MarketingChannel.statuses[MarketingChannel.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
            when 'carrier'
              val = Carrier.statuses[Carrier.statuses.key(fields(index, i)['id'].to_i)] unless i.nil?
          end
          val
        end
      ")

      #Here's the setter
      self.class_eval("
        # Setter for #{arg} - Generated with meta-programming
        # @param val [Symbol] The value you want to set
        # @return [Integer] #{arg} of the Global Talent
        def #{arg}=(val)
          @#{arg} = val
        end
      ")
    end
  end

  # Acessor to generate multiple category Podio Fields Getter and Setter
  def list_attr_accessor(*args)
    args.each do |arg|
      #Here's the getter
      self.class_eval("
        # Getter for #{arg} of the Global Talent
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Hash] #{arg} of the Global Talent
        def #{arg}(index)
          @#{arg};
        end
      ")
      #Here's the setter
      self.class_eval("
        # Setter for #{arg} of the Global Talent
        # @param val [Hash] The value you want to set
        # @return [Hash] #{arg} of the Global Talent
        def #{arg}=(val)
          @#{arg} = val
        end
      ")
    end
  end

  # Acessor to generate Phone and Emails Podio Fields Getter and Setter
  def multiple_attr_accessor(*args)
    args.each do |arg|
      #Here's the getter
      self.class_eval("
        # Getter for #{arg} of the Global Talent
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Hash] #{arg} of the Global Talent
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          values(index, i) unless i.nil?
        end
      ")
      #Here's the setter
      self.class_eval("
        # Setter for #{arg} of the Global Talent
        # @param val [Hash] The value you want to set
        # @return [Hash] #{arg} of the Global Talent
        def #{arg}=(val);
          @#{arg} = val;
        end
      ")
    end
  end

  # Acessor to generate Reference Podio Fields Getter and Setter
  def reference_attr_accessor(*args)
    args.each do |arg|
      #Here's the getter
      self.class_eval("
        # Getter for #{arg} of the Global Talent
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Integer] Id of #{arg} reference of the Global Talent
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          fields(index, i)['item_id'].to_i unless i.nil?
        end
      ")
      #Here's the setter
      self.class_eval("
        # Setter for #{arg} of the Global Talent
        # @param val [Integer] The reference id you want to set
        # @return [Integer] #{arg} of the Global Talent
        def #{arg}=(val)
          @#{arg} = val.to_i unless val.nil?
        end
      ")
    end
  end

  # Acessor to generate Link Podio Fields Getter and Setter
  def link_attr_accessor(*args)
    args.each do |arg|
      #Here's the getter
      self.class_eval("
        # Getter for #{arg} of the Global Talent
        # @param index [Integer] Index of the item you want to retrieve the value
        # @return [Hash] #{arg} of the Global Talent
        def #{arg}(index)
          i = get_field_index_by_external_id(index, @fields[:#{arg}])
          field = values(index, i) unless i.nil?
          field[0]['embed'] unless field.nil?
        end
      ")
      #Here's the setter
      self.class_eval("
        # Setter for #{arg} of the Global Talent
        # @param val [Hash] The value you want to set
        # @return [Hash] #{arg} of the Global Talent
        def #{arg}=(val)
          @#{arg} = val
        end
      ")
    end
  end
end